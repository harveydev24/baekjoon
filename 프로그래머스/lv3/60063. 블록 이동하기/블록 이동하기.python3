from collections import deque

def solution(board):
    answer = 10**7
    N = len(board)
    dr, dc = [-1, 0, 1, 0], [0, 1, 0, -1]
    visited = [[[-1]*2 for i in range(N)] for j in range(N)]

    state = [0, 0, 0]  # r, c, direction

    q = deque([(0, 0, 0, 0)])  # 0 가로 1 세로
    visited[0][0][0] = 0

    while q:
        r, c, d, t = q.popleft()

        if d == 0:
            if r == N-1 and c+1 == N-1:
                answer = min(answer, t)
                continue
        elif d == 1:
            if r+1 == N-1 and c == N-1:
                answer = min(answer, t)
                continue

        if t >= answer:
            continue

        for i in range(4):
            rr, cc = r+dr[i], c+dc[i]
            if d == 0:
                if 0 <= rr < N and 0 <= cc < N-1:
                    if board[rr][cc] == 0 and board[rr][cc+1] == 0:
                        if visited[rr][cc][d] == -1 or visited[rr][cc][d] > t+1:
                            visited[rr][cc][d] = t+1
                            q.append((rr, cc, d, t+1))
            if d == 1:
                if 0 <= rr < N-1 and 0 <= cc < N:
                    if board[rr][cc] == 0 and board[rr+1][cc] == 0:
                        if visited[rr][cc][d] == -1 or visited[rr][cc][d] > t+1:
                            visited[rr][cc][d] = t+1
                            q.append((rr, cc, d, t+1))

        if d == 0:
            if 0 <= r-1 < N and board[r-1][c] == 0 and board[r-1][c+1] == 0:
                if visited[r-1][c][1] == -1 or visited[r-1][c][1] > t+1:
                    visited[r-1][c][1] = t+1
                    q.append((r-1, c, 1, t+1))
                if visited[r-1][c+1][1] == -1 or visited[r-1][c+1][1] > t+1:
                    visited[r-1][c+1][1] = t+1
                    q.append((r-1, c+1, 1, t+1))
            if 0 <= r+1 < N and board[r+1][c] == 0 and board[r+1][c+1] == 0:
                if visited[r][c][1] == -1 or visited[r][c][1] > t+1:
                    visited[r][c][1] = t+1
                    q.append((r, c, 1, t+1))
                if visited[r][c+1][1] == -1 or visited[r][c+1][1] > t+1:
                    visited[r][c+1][1] = t+1
                    q.append((r, c+1, 1, t+1))

        elif d == 1:
            if 0 <= c+1 < N and board[r][c+1] == 0 and board[r+1][c+1] == 0:
                if visited[r][c][0] == -1 or visited[r][c][0] > t+1:
                    visited[r][c][0] = t+1
                    q.append((r, c, 0, t+1))
                if visited[r+1][c][0] == -1 or visited[r+1][c][0] > t+1:
                    visited[r+1][c][0] = t+1
                    q.append((r+1, c, 0, t+1))
            if 0 <= c-1 < N and board[r][c-1] == 0 and board[r+1][c-1] == 0:
                if visited[r][c-1][0] == -1 or visited[r][c-1][0] > t+1:
                    visited[r][c-1][0] = t+1
                    q.append((r, c-1, 0, t+1))
                if visited[r+1][c-1][0] == -1 or visited[r+1][c-1][0] > t+1:
                    visited[r+1][c-1][0] = t+1
                    q.append((r+1, c-1, 0, t+1))

    return answer