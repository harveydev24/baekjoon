def makePi(pattern):
    pattern_length = len(pattern)
    pi = [0] * pattern_length
    matched_length = 0
    i = 1

    while i < pattern_length:
        if pattern[i] == pattern[matched_length]:
            matched_length += 1
            pi[i] = matched_length
            i += 1
        else:
            if matched_length != 0:
                matched_length = pi[matched_length-1]
            else:
                pi[i] = 0
                i += 1
    return pi


def KMP(S, P, pi):
    i, j = 0, 0
    cnt = 0
    idx = []

    while i < len(S):
        if S[i] == P[j]:
            i += 1
            j += 1
        else:
            if j != 0:
                j = pi[j-1]
            else:
                i += 1

        if j == len(P):
            return True
    return False


def timediff_to_min(start, end):
    start_hh, start_mm = map(int, start.split(':'))
    end_hh, end_mm = map(int, end.split(':'))
    return (end_hh-start_hh)*60 + end_mm - start_mm


def convert(s):
    ret = ''
    for i in range(len(s)-1):
        if s[i] != '#':
            if s[i+1] == '#':
                ret += s[i].lower()
            else:
                ret += s[i]
    if s[-1] != '#':
        ret += s[-1]
    return ret


def solution(m, musicinfos):
    m = convert(m)
    pi = makePi(m)
    ans = '(None)'
    max_duration = 0
    pattern_len = len(m)

    for musicinfo in musicinfos:
        start, end, name, melody = musicinfo.split(',')
        s = ''
        t = timediff_to_min(start, end)
        melody = convert(melody)
        melody_len = len(melody)
        s += melody*(t//melody_len)
        s += melody[:t % melody_len]
        s_len = len(s)

        if m in s:
            if t > max_duration:
                ans = name
                max_duration = t
        # else:
        #     if KMP(s, m, pi):
        #         if len(name) > max_duration:
        #             ans = name
        #             max_duration = len(name)

    return ans